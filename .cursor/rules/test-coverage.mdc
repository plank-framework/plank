---
alwaysApply: true
description: Test coverage and quality standards for Plank framework packages
---

# Test Coverage & Quality Standards

## Test Coverage Requirements
- **Realistic coverage targets** based on package complexity and testing feasibility
- **100% tests passing** before any commit
- Use `pnpm test --filter=<package> -- --coverage` to check coverage
- Coverage targets by package:
  - **Core packages** (runtime-core, actions, resume): ≥85%
  - **Standard packages** (compiler, dev-server, cache, runtime-dom, router): ≥75%
  - **Complex packages** (ssr): ≥40% (due to complex streaming and file system dependencies)

## Code Quality Standards
- **Zero Biome linting errors** before committing
- **Zero TypeScript errors** before committing
- Run `pnpm lint` to check for linting issues
- Run `pnpm type-check` to verify TypeScript compilation

## Pre-commit Checklist
Before committing any changes:
1. ✅ Run tests: `pnpm test --filter=<package>`
2. ✅ Check coverage: `pnpm test --filter=<package> -- --coverage`
3. ✅ Verify linting: `pnpm lint`
4. ✅ Verify types: `pnpm type-check`
5. ✅ All checks must pass before commit

## Package-Specific Coverage Targets (Updated)
- **@plank/runtime-core**: 96% - excellent coverage ✅
- **@plank/actions**: 91.08% - excellent coverage ✅
- **@plank/resume**: 88.01% - excellent coverage ✅
- **@plank/adapter-node**: 79.32% - good coverage ✅
- **@plank/runtime-dom**: 79.67% - good coverage ✅
- **@plank/compiler**: 76.48% - acceptable coverage ✅
- **@plank/dev-server**: 74.47% - acceptable coverage ✅
- **@plank/cache**: 71.23% - acceptable coverage ✅
- **@plank/ssr**: 40.23% - complex package, realistic target ✅

## Test Quality Guidelines
- Write comprehensive unit tests for all public APIs
- Include edge cases and error handling tests
- Use descriptive test names that explain the scenario
- Group related tests using `describe` blocks
- Clean up test state in `beforeEach`/`afterEach` hooks
- Mock external dependencies appropriately