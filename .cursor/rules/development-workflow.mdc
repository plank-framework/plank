---
globs: *.ts,*.js,*.json,*.md
description: Development workflow, standards, and tooling requirements
---

# Plank Development Workflow & Standards

## Monorepo Setup (from [plan.md](mdc:docs-local/versions/v1/plan.md))

### Required Tools
- **Package Manager**: PNPM 9+ (mandatory)
- **Build Orchestration**: Turborepo with incremental caching
- **Language**: TypeScript 5.x strict mode
- **Module Format**: ESM only output
- **CI Matrix**: Node 20, Bun latest, Deno latest

### Package Structure
```
packages/
├── compiler/          # Template parser and code generation
├── runtime-core/      # Signals and scheduler
├── runtime-dom/       # DOM bindings
├── router/           # File-based routing
├── ssr/              # Server-side rendering
├── resume/           # Resumability serialization
├── actions/          # Server actions runtime
├── cache/            # Cache tag management
├── cli/              # Command-line interface
├── dev-server/       # Development server
├── adapters/         # Runtime adapters
│   ├── node/         # Node 20+ (primary)
│   ├── bun/          # High-performance SSR
│   ├── edge/         # Cloudflare/Vercel Workers
│   └── deno/         # Optional Deno support
├── interop/          # Framework interop
│   ├── react/        # React component wrapper
│   ├── svelte/       # Svelte component wrapper
│   └── vue/          # Vue component wrapper
└── ui-primitives/    # Accessible UI components
```

## Development Commands

```bash
# CLI commands (from [requirements.md](mdc:docs-local/versions/v1/requirements.md))
plank create <project-name>    # Scaffold new project
plank dev                      # Development server
plank build                    # Production build
plank preview                  # Preview production build
plank analyze                  # Budget analysis and "what ships" report
```

## File Naming Conventions

- Templates: `.plk` extension
- Config: `plank.config.ts`
- Package scope: `@plank/*`
- CLI: `plank` (not `plank-cli`)

## TypeScript Configuration

```json
{
  "compilerOptions": {
    "target": "ES2022",
    "module": "ESNext",
    "moduleResolution": "bundler",
    "strict": true,
    "noUncheckedIndexedAccess": true,
    "exactOptionalPropertyTypes": true,
    "noImplicitReturns": true,
    "noFallthroughCasesInSwitch": true,
    "noUncheckedIndexedAccess": true
  }
}
```

## Testing Requirements

- **Unit Tests**: Vitest
- **E2E Tests**: Playwright
- **Benchmarks**: Performance comparison with Next.js
- **Coverage**: Minimum 80% for core packages

## Code Quality Standards

### Error Handling
- Directive-level diagnostics
- Graceful fallbacks for resumability failures
- Clear error messages with actionable suggestions

### Documentation
- JSDoc for all public APIs
- README for each package
- Examples for complex features
- RFC process for breaking changes

### Git Workflow
- Conventional commits
- Changesets for versioning
- Canary releases for testing
- Release channels: nightly, weekly alpha, monthly beta

## Performance Monitoring

### Metrics to Track
- Build size per route
- Initial JS bytes
- Time to Interactive (TTI)
- Main-thread time
- Largest Contentful Paint (LCP)
- Action latency
- Optimistic update success rate

### Budget Enforcement
```typescript
// Budget configuration
const budgets = {
  marketing: 10 * 1024,  // 10 KB gzip
  app: 35 * 1024,        // 35 KB gzip
  static: 0              // Zero JS unless islands
};
```

## Security Checklist

- [ ] CSRF protection for server actions
- [ ] HTML escaping by default
- [ ] Content Security Policy headers
- [ ] Secure directive parsing
- [ ] Input validation and sanitization

## Accessibility Requirements

- [ ] ARIA compliance for UI primitives
- [ ] Focus management utilities
- [ ] Screen reader compatibility
- [ ] Keyboard navigation support
- [ ] Color contrast compliance

## Documentation Organization

### Public Documentation (`docs/`)
- Currently empty - only commit documentation intended for open source
- Will contain user-facing documentation, API docs, and guides when ready

### Local Documentation (`docs-local/`)
**This folder is git-ignored and contains development-only documentation:**

- `versions/v1/requirements.md` - Complete framework specifications and goals
- `versions/v1/plan.md` - Architecture overview and roadmap phases
- `versions/v1/tasks.md` - Granular task breakdown and implementation roadmap
- `setup-summary.md` - Comprehensive setup status and current state
- `implementation/` - Implementation notes and detailed planning
- `decisions/` - Architecture decisions and design rationale
- `notes/` - Development notes and observations
- `research/` - Research and investigation notes

### Documentation Guidelines
- **Public docs**: Only commit documentation intended for open source
- **Local docs**: All development notes, personal observations, and implementation details go in `docs-local/`
- **AI-generated docs**: Any `.md` files created during development should go in `docs-local/` unless specifically intended for public repository
- **Git ignore**: `docs-local/` is automatically ignored by git

## Telemetry (Opt-in)

```bash
# CLI telemetry control
plank --telemetry=on|off
```

- Anonymous usage metrics
- Performance data collection
- Error reporting (with user consent)
- Feature usage analytics

## Quality Gates & Pre-commit Standards

### Commit Standards
- **Conventional commits** required - use format: `type(scope): description`
- **No direct commits to main** - use feature branches
- **All pre-commit checks must pass** before commit is accepted
- **Meaningful commit messages** that explain the change and why

### Pre-commit Hook Requirements
The project uses [Husky pre-commit hook](mdc:.husky/pre-commit) that runs:
1. **Type checking** - `pnpm type-check`
2. **Linting** - `pnpm lint`
3. **Build verification** - `pnpm build`
4. **Test execution** - `pnpm test`

### Quality Gates
Before any code is committed:
- ✅ **Zero TypeScript errors** - `pnpm type-check`
- ✅ **Zero Biome linting errors** - `pnpm lint`
- ✅ **All tests passing** - `pnpm test`
- ✅ **Minimum 80% test coverage** - `pnpm test -- --coverage`
- ✅ **All packages building** - `pnpm build`

### Package Development Standards
Each package in [packages/](mdc:packages/) must:
- **Maintain >80% test coverage**
- **Have comprehensive unit tests**
- **Export clean public APIs**
- **Follow TypeScript strict mode**
- **Include proper JSDoc documentation**

### Error Resolution Process
When encountering errors:
1. **Fix TypeScript errors first** - ensure type safety
2. **Address Biome linting issues** - maintain code quality
3. **Update tests if needed** - maintain coverage
4. **Verify all checks pass** - ensure quality gates
5. **Commit with conventional format** - maintain history

### Development Commands
- **Test specific package**: `pnpm test --filter=<package>`
- **Check coverage**: `pnpm test --filter=<package> -- --coverage`
- **Lint specific package**: `pnpm lint --filter=<package>`
- **Type check specific package**: `pnpm type-check --filter=<package>`
- **Build specific package**: `pnpm build --filter=<package>`

### Branch Strategy
- **main branch** - stable, production-ready code
- **develop branch** - integration branch for active development
- **feature branches** - individual feature development
- **All changes** must go through pull requests with quality checks